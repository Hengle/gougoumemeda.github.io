---
layout:     post
title:      "Wap STM Web开发心得"
subtitle:   "认真工作，养(xiao)家(sa)糊(ren)口(sheng)"
date:       2017-08-27 20:51:00
author:     "George"
header-img: "img/post-bg-wap.jpg"
tags:
    - Works Applications
    - Web
    - 技术
---

## 前言

这一周其实过的很不好，算是自己近两年来，心情最糟糕的一周。

我一直告诉自己，活到现在，其实是没有什么事情需要后悔的。如果有第二次机会的话，我想收回上周三晚上说的所有的话，对不起。

所谓冲昏了头脑，大抵如此。


## 正文

这一个月里，一直都在做一个Personal Information System。做的过程中因为是不允许上网的，所以还遇到了不少的问题要去解决。本文就具体介绍一下这些问题，以后遇到的时候也有一个解决方案。

当然，由于公司要求保密，因此相关的细节代码不会公开。

### 使用webkitRequestFileSystem来导出文件

这部分是HTML5的File API的部分。之前在我印象中，只有IE有相应开放的接口来操作本地文件的。HTML5出来之后，主流的浏览器都已经支持这样的操作了，像是webkit内核的chrome浏览器等。

由于该功能的代码与项目有密切联系，这里就不多介绍了。如果相关开发人员需要在本地导出文件，可以考虑使用该API来实现。

### -webkit-user-select

我们知道，如果我们把鼠标放到浏览器的文字上面，那么鼠标的标志会变成编辑状态。如果我们按下并且拖动，那么这部分的文字将会被选中进行高亮显示。如果我们再按下鼠标，会发现这部分文字是可以被拖动的（在html中表现为draggable属性为true）。

在本项目中，这种行为是非常危险的。因为我们可以拖动整个table的column，来改变他们的顺序，因此每一个元素的draggable属性必须要个的由我们的代码来控制，一些浏览器默认的行为需要被禁止，包括我们上文提到的选中文字拖动操作。

具体的禁止方式，就是在css中，把-webkit-user-select属性进行修改：

```
body{
	-webkit-user-select: none;
}
```

该属性设置成none之后就音质用户在页面上进行文字的选中。当然-webkit前缀规定了适用于chrome等浏览器，其他内核浏览器也有相应的修改方法，这里就不再阐述了。

### 修改table的宽度。

在本项目中，我们提供给用户一个功能，可以让他们随意来修改column的宽度。如果有很多column的话，用户可以将他们的宽度设置的小一点，这样就能看到更多了，提高用户体验。

但是在具体的实现过程中，由于table本身有自适应的功能，以及jQuery本身的函数实现不同，会有很多的问题所在，这里就简单阐述一下设置的几点规则。

一般而言，table的自适应是由于所有column宽度加起来不等于table的宽度而导致的。

在自适应的过程中，table会优先改变从来没有设置过宽度的column，而table整体的宽度是保持不变的。

如果所有的column的宽度都被制定过，那么我们在修改一个column的宽度时，其他所有column的宽度都会被改变。这种情况是非常糟糕的，一般都是不符合要求的。

因此，如果我们要定制每一个column的宽度，我们有如下两种相对理想的解决方案。

- 设置每一个column的宽度，并且计算总宽，赋值给table。确保table的宽度等于所有column的总宽。
- 保留一个column永远不设置宽度，做自适应项。（一般就是加一个空列）

知道了规则，实现起来就方便很多了。然而，如果我们使用jQuery的$.fn.width()函数，我们会发现始终达不到我们的目标。原因是，$.fn.width()函数在box-sizing属性为border-box的元素中，不会计算其padding。而如果我们用bootstrap等常用的UI库做table时，通常都会有一个padding。因此在计算总宽时，除了对每一个column使用$.fn.width()函数外，也要加上padding值。

还有一个解决的方案是不使用$.fn.width()函数，而是用$.fn.css('width')，这样的话我们得到的宽度是算上padding的。但是注意该函数返回的结果是一个string，并且包含px等后缀，需要自行处理。

### 神秘前缀\ufeff

这其实是uft-8的一个bom头。所谓bom头，就是用来标识该文件属于utf-8编码。由于我们项目中导出txt，csv文件这个功能里可能会包含有中文的字符，因此我们需要使用uft-8编码。

这个bom头是微软自己规定的，他建议所有的 Unicode 文件应该以 ZERO WIDTH NOBREAK SPACE（U+FEFF）字符开头。这作为一个“特征符”来识别文件中使用的编码和字节顺序。但是目前，该bom头的兼容性并不好，只在windows操作系统相应的文件读取软件中使用，例如记事本等。如果我们用记事本打开一个文件，用uft-8格式保存之后，就会发现自动带上了这样一个bom头。

本项目中，我们默认文件下载之后是需要用记事本来打开的，并且需要支持非英文字符，因此我们加上一个前缀\ufeff来告诉它，这是uft-8编码的字符串，这样才能得到正确的显示结果。

### roll back系统

为了防止用户误操作或者一些恶意操作，我们系统增加了一个回滚功能。具体的功能和git reset比较类似。

我们记录用户所有的操作，包括对employee信息的修改以及对list的自定义。一条记录包括修改的时间，修改的用户，在什么上进行了修改，修改了什么，修改之前的数据和修改之后的数据等。用户随时都可以查看这些记录，如果点击了其中的一条记录，将会被roll back的所有记录都会被高亮显示，如下图：

![img](/img/in-post/WAP/2.JPG)

这里需要注意，如果是set default操作，那么在该记录之前的所有set default操作都会被回滚。如果是其他操作，那么该记录之前的作用与同一目标的所有操作会被回滚。这两条是我根据用户可能希望的结果自己制定的规则，之后可能会有所更改。

实际的回滚操作还是比较简单的，我们已经有了所有要回滚的记录，根据第一条的记录的after以及最后一条记录的before来决定回滚所要执行的操作，然后将目标的值（assemble的column，employee的信息等）恢复为最后一条记录的before即可。

### 测得一个text所占用的pixel

这部分其实是一个相对比较trick的实现。既然我们没有办法通过具体的某一个函数代码来计算出像素值，那么我们就将这部分文字放到dom中，看看实际占用多少就可以了。

因此，我们新建一个<div>元素，设置如下的css:

```
#columnLengthCount{
	visibility: hidden;
	float: left;
	font-weight: bold;
}
```

float属性可以让<div>的宽度根据text的长度来自适应。最后我们得到的该<div>的宽度就是一个text所占用的pixel了。

### 双击和单击事件

在js的实践中，同时存在单击和双击事件。如果我们就正常的添加这两个事件的话，想要执行一次双击事件会额外执行两次单击事件。

因此，在通常情况下，我们需要屏蔽掉这两次单击事件，仅仅执行双击。一般的解决方案是添加一个计时器，如果双击的时间间隔超过一个阈值，则看做是单击。如果时间间隔小于这个值（一般是0.3秒左右），则看做是双击。

```
$.fn.click(function(){
	clearTimeout(timer);
	timer = setTimeout(function(){
		...
	}, 300);
})

$.fn.dblclick(function(){
	clearTimeout(timer);
	...
})
```

### 点击空白处弹窗消失

在本项目中，使用到了一部分的弹窗：搜索框和回滚系统数据查看框。这部分弹窗使用的是bootstrap中的popover组件。该组件默认情况下是点击按钮出现，再点击按钮则消失。但是有时候，我们需要实现的效果是，点击按钮出现，然后点击任意其他空白位置消失。这样做可以提高用户的使用效率而不需要再去点击按钮。

实现的思路很简单，在document绑定一个click时间，如果点击的位置不在弹窗内，则执行弹窗消失的操作：

```
$(document).click(function(e){
	var _con = $('.popover');
	if (!_con.is(e.target) && _con.has(e.target).length === 0){
		... //popover disappears
	}
})
```

这里_con就是我们显示的popover，如果点击事件的目标不是popover或者其子元素，则将其消失。

That's all.

## 后记

明天七夕节，欢迎来约。

干什么都可以，我奉陪到底，我买单到底。







