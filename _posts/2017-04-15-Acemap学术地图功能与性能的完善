---
layout:     post
title:      "Acemap学术地图功能和性能的完善"
subtitle:   "我要毕业，我要认真做毕设"
date:       2017-04-14 12:45:00
author:     "George"
header-img: "img/post-bg-acemap.jpg"
tags:
    - Acemap
    - Javascript
    - 技术
---

## 前言

说一点题外话，我最终还是决定去东京。不是为了生活的有多好，只是想出去走走多看看世界。如果东京也能够容下我，那我应该也会定居在那里吧。

其实是一个很艰难的决定，因为要顾忌到的东西有太多了。包括朋友，家人，还有东京那里的生活节奏，个人习惯等。我知道自己如果要考虑的话，还能纠结个几个月。但是纠结的日子是很痛苦的，想快点摆脱这种困扰，就狠下心来让自己做这个决定。嗯，他也是一个很草率的决定。

## 正文

### 功能

上次在寒假那会儿已经把话题地图给完成了，而且将map和searchBar的公用部分代码都已经提取出来了。因此，剩下来功能上的部分就相对来说比较简单一些，只需要套用模板就行。

首先是机构地图。机构地图，顾名思义，就是以一个机构为中心，该机构中的作者为节点显示的一张图。

原先，我们地图中的所有线条都是直线的，这样并不美观。因此我们在这里将点与点之间的边用一根贝塞尔曲线来表示，具体绘制的函数如下：

```
function pathd(source,target,bezierCurveness){
	var x1 = Number(source.x);
	var y1 = Number(source.y);
	var x2 = Number(target.x);
	var y2 = Number(target.y);
	var length = Math.sqrt(Math.pow(x1-x2,2)+Math.pow(y1-y2,2));
	var factor = bezierCurveness*length;
	var v1_X = ((x2-x1+y2-y1)*factor+x1*length)/length;
	var v1_Y = ((y2-y1+x1-x2)*factor+y1*length)/length;
	var v2_X = ((x1-x2+y2-y1)*factor+x2*length)/length;
	var v2_Y = ((y1-y2+x1-x2)*factor+y2*length)/length;
	var result = "M "+String(x1.toFixed(6))+","+String(y1.toFixed(6))+" C "+String(v1_X.toFixed(6))+","+String(v1_Y.toFixed(6))+" "+String(v2_X.toFixed(6))+","+String(v2_Y.toFixed(6))+" "+String(x2.toFixed(6))+","+String(y2.toFixed(6));
	return result;
}
```
该函数能够根据两个节点的坐标以及贝塞尔曲线的弧度来返回svg的路径。事实证明在美观程度上有了很大的提高，现在的UI如下图所示。

![img](/img/in-post/Acemap/3.png)

因为急着上线，因此没有截取之前UI的图片，大家脑补一下即可。

然后另外一张新地图是合作者地图，也就是以一个作者为中心，其他合作者为节点的地图。

这个地图其实要改的东西还是非常之多的。除了将svg从前端生成，把左边的侧栏实现之外，还需要将原先作者页面的所有信息都搬到地图中。这对信息的筛选和整合是一个非常大的挑战。

但是，这部分挑战仅仅是产品上的问题，只要我们知道要哪些东西，舍弃哪些东西，在技术上实现是没有难度的。唯一一个比较困难的问题是作者论文这一块。因为一个作者的论文数量有很多（最多的达8000+），因此我们需要添加一个分页的功能。那么究竟是前端分页还是后台分页呢？事实上，在目前绝大多数的上线产品中，分页都是使用后台分页的。如果我们数据量很大，大到需要分页的话，那么一次从后台传输这些数据的耗时是非常高的。我们将数据从数据库中取出来的时候就规定好一个start和一个offset，这样我们进行一次数据请求，返回的内容仅仅为一页所需要的内容。这么做虽然时间上有了节约，但是我们每一次分页都需要重新向后台请求数据。大部分情况下，后台分页比前段分页是有优势的。

除此之外，论文部分还添加了一个根据年份筛选的功能。该功能直接将参数传入后台，在SQL语句中添加WHERE即可，没有难度。

啊对了，这个分页器也是我自己写的，已经包装在一个文件中了。因为原先是想自己使用，因此也没有在接口和库文件规范上有下功夫，不过在这里我依然把代码公开一下，感兴趣的朋友可以自己用用看。[pagination.js](/js/pagination.js)，依赖于bootstrap和jquery。

使用方法很简单，在html中插入如下语句：

```
<ul class="pagination pagination-sm"></ul>
```

然后，在js中初始化该pagination，初始化函数如下：

```
function initPagination(number, func)
```

参数number是总共的页数，func是单击页码时执行的数据操作（一般也就是请求后台）。

下面放上一张合作者地图新的UI图吧！

![img](/img/in-post/Acemap/4.png)

之前已经完成的话题地图也做了一点改进，将年份选择做成了滑杆的形式，两个滑块之间的就是选择的年份区间。滑杆就没有自己写了，用的是nst-slider这个第三方库，还是比较方便的。

### 性能

前端性能上的提高就不提了，主要就是整理代码，减少重复的事件绑定和后台请求。这次主要是后台上的性能提高。

首先是SQL上的query cache。之前我们把query cache一直都是打开的，然后有时候请求返回的速度就很慢。查log之后发现SQL一直在输出waiting for query cache lock。查阅了一下网上的资料，发现该cache会缓存之前使用过的SQL查询语句以及查询结果。这对于一些我们经常查询一样的内容并且表内容不频繁变化的情况会比较有用。但是在acemap中，我们每一次查询的内容几乎都是不同的，像paperid，authorid都是想变就变的。因此我们每一次查询的时候，就会刷新这个cache，刷新这个cache又会上锁。因此在并发数达到一定的情况下，就会有明显的卡顿现象了。

然后是redis缓存。我们在话题地图的前50名作者功能中，使用了redis作为数据缓存。因为这个表的大小很大，如果每一次都从SQL中取出的话，会很占用时间。redis将数据缓存在内存之中，而且并不是使用表结构，而是我们代码中更为常见的字典结构，一个key对应一个value，因此使用上也非常的方便。在后台我们判断一下在redis中是否有数据缓存即可：

```
if ($redis -> hExists($topicID, 'famousAuthor')){
	$authors = json_decode($redis -> hGet($topicID, 'famousAuthor'), TRUE);
}
```

大概就是这样。

### 目标

目前我们所有的地图上的功能都已经实现了，下一阶段会着重在搜索这一块。搜索组已经在后台开始使用了solr引擎，只不过目前还没有移植到前端。之后在了解了相应的使用方法之后，我会及时的在前端跟进的。

## 后记

看我这么认真的做毕设写博客的份上，求天赐我一个女朋友。





