---
layout:     post
title:      "移动端模拟Calendar"
subtitle:   "认真工作，养(xiao)家(sa)糊(ren)口(sheng)"
date:       2018-05-17 23:55:00
author:     "George"
header-img: "img/post-bg-wap.jpg"
tags:
    - Works Applications
    - Web
    - 技术
---

## 前言

最近在公司因为主要是做mobile的开发工作，而公司本身mobile的组件又非常的匮乏，所以自己制作的组件就数量慢慢多起来了。上次是介绍了一个data-picker，来模拟iOS端UIDataPickerView的行为。这里是实现了一个calendar，这个在iOS或者安卓系统本身的控件中是没有的，所以也没有什么模仿的一说，就是项目需要所以就做了。

## 正文

现在就来介绍一下这个calendar的实现步骤。其实还是比较简单的相对于上一篇data-picker来说。具体的实现一共分成三步：

- 绘制日历
- 滑动操作
- 点击事件

我们一步一步介绍具体的操作。

#### 绘制日历

这部分其实没有什么难度，就是几个循环遍历一下就可以。不过有几个变量值得注意一下：

```
var numberOfDays = this.getNumberOfDaysOfMonth_(year, month);
var firstDayOfMonth = this.getFirstDayOfMonth_(year, month);
var numberOfWeeks = this.getNumberOfWeeksOfMonth_(year, month);
```

第一个表示这个月有多少天，实现如下

```
/**
 * @private
 * @param {number} year
 * @param {number} month
 * @return {number}
 */
Calendar.prototype.getNumberOfDaysOfMonth_ = function(year, month) {
  return new goog.date.Date(year, month, 1).getNumberOfDaysInMonth();
};
```

这个函数没有什么要自己计算的部分，调用Google Closure本身的API就可以啦。

第二个变量表示这个月的第一天是星期几，实现如下

```
/**
 * @private
 * @param {number} year
 * @param {number} month
 * @return {number}
 */
Calendar.prototype.getFirstDayOfMonth_ = function(year, month) {
  return new goog.date.Date(year, month, 1).getDay();
};
```

其实也非常好理解，构造一个这个月第一天的Date变量，获取星期几就可以啦。

最后一个变量表示这个月有几周，实现如下

```
/**
 * @private
 * @param {number} year
 * @param {number} month
 * @return {number}
 */
Calendar.prototype.getNumberOfWeeksOfMonth_ = function(year, month) {
  var numberOfDays = this.getNumberOfDaysOfMonth_(year, month);
  var firstDayOfMonth = this.getFirstDayOfMonth_(year, month);
  var totalDays = numberOfDays + firstDayOfMonth;
  if (totalDays % 7 === 0) return totalDays / 7;
  else return Math.floor((numberOfDays + firstDayOfMonth) / 7) + 1;
};
```

我们最终绘制日历的时候，会先从周开始遍历，第三个变量就是控制周遍历的次数。在每一个周遍历中，进行日期的遍历。第一个变量来决定最后一周的日期到哪里结束，而第二个变量来决定第一周的日期从周几开始。所以说这三个变量非常的关键了。其他的绘制过程应该没有什么难度，只要注意如果是当天的话要增加一些样式；如果是选中的日期的话样式要变成什么样就可以了。

#### 滑动操作

这里的滑动操作我们使用了framework7框架中的[swiper](https://framework7.io/docs/swiper.html)。首先需要在xml里面添加相应的元素，这里就不多介绍了，主要解释一下js中的操作。

```
var swiperParams = {
  width: goog.style.getSize(this.getCalendarSwiperWrapper_()).width,
  autoHeight: true
};
```

需要注意的是，在初始化的时候，我们制定了width值。这是因为，一开始的时候这个swiper是隐藏的，在doc中说到，如果默认隐藏的话，我们需要手动指定width，并且不会有自适应。既然要手动指定width，那么我们就要通过js来获取包它的wrapper的宽度。那么问题又来了，这个初始化的过程我们没有办法确定是在CSS被应用之前还是应用之后。经过测试我们也发现，大多数情况下直接得到wrapper的宽度是0。所以我们需要等这个wrapper的CSS宽度被引用到了元素上之后，在去获取它的宽度。这里就需要Google Closure提供的`ConditionalDelay`了。

```
var getCalendarWidthDelay = new goog.async.ConditionalDelay(this.checkCalendarStyleAvailable_, this);
getCalendarWidthDelay.onSuccess = function() {};
getCalendarWidthDelay.start(Calendar.CONST_.TEST_INTERVAL, Calendar.CONST_.TEST_TIMEOUT);
```

简单来说，就是每隔一段时间去执行一个函数，这个函数会返回一个boolean。如果true则执行onSuccess。同时会有一个timeout，经过多久之后都不为true的话就放弃。

初始化swiper结束之后，我们把当前月份，当前月份前后的两个月份同时作为slide加入到这个swiper中。

```
this.swiper_.appendSlide([lastMonthData, currentMonthData, nextMonthData]);
```

同时，在滑动结束后触发的回调事件中，我们需要规定，如果当前slide是最后一张slide，我们就去load下一月的数据并加入到swiper中。如果是第一张则load再上一个月的数据加进去。这样做用户就不会察觉到实际上我们月份是动态添加进去的，看上去就像是一个能无限滑动的calendar。

```
if (this.swiper_.activeIndex === 0) {
  this.swiper_.prependSlide(this.getMonthDataElement_(this.getLastMonth_().year, this.getLastMonth_().month));
} else if (this.swiper_.activeIndex === this.swiper_.slides.length - 1) {
  this.swiper_.appendSlide(this.getMonthDataElement_(this.getNextMonth_().year, this.getNextMonth_().month));
}
```

#### 点击事件

这个没有什么难度的，点下后获取年月日，同时把这个日期加上选中的样式，清除其他日期上的样式即可。

有一点需要说的是，我们增加了一个`selectableDateRange_`来表示可以选择的日期范围。如果超出了这个范围，那么点上去也不会有什么反应。

## 后文

没什么想说的谢谢。










