---
layout:     post
title:      "用JS自制UIPickerView"
subtitle:   "认真工作，养(xiao)家(sa)糊(ren)口(sheng)"
date:       2018-05-05 23:55:00
author:     "George"
header-img: "img/post-bg-wap.jpg"
tags:
    - Works Applications
    - Web
    - 技术
---

## 前言

这个UIPickerView其实制作的难度还是相当之大的，主要是利用到了一些数学方面的知识和需要考虑性能方面的问题。下面我们就一步一步来讲我的思路和如何去实现的。

## 正文

#### 整体结构

首先我们要划分清楚，这个data-picker是一个单独的组件还是由几个小组件构成。这里因为在手机上可能会有几个不同的独立的滚轮，所以我们把一个data-picker拆分成多个不同的data-picker-column。那么所有的滚动实现的细节都在data-picker-column中实现，我们现在来具体思考一下这个column需要哪些操作。

- 建模，把3D模型投射到2D平面中
- 滑动时的行为
- 滑动结束后惯性行为
- 滑动速度小于某值时自动滚动到最近的item

大概正常的column实现的步骤就是上述几个。这个其实也很好想，实际在手机上使用时看看干了哪些事就知道了。但是这里我们多增加一个“规范化”的步骤。什么意思呢，实际上我们左右的数学计算都是使用double类型的，而double类型在计算机中会有一部分的精度损失，最终导致在界面上会有微小的位置偏移。所以我们在滚动完之后重新计算一次所有item应该在的位置，然后直接将他们移动过去。这部分时候也会解释。

#### 建模

建模过程并不难，首先我们要确定在组件中需要哪些成员变量。实际上我们所看到的column是由“可见item”组成的，仅仅是180°的视角。而那些不可见的item，会被隐藏起来，具体怎么隐藏可以根据不同的开发者自己设定，但是这部分不可见的，应当在某些条件下（滚动的时候）能够出现在屏幕中，而那些可见的item也能够隐藏起来。

现在我们来想一下item应该有哪些要素，首先是dom元素，然后是当前item位置的角度，这里我们规定y负方向为0°，z正方向为90°。此外还需要给每一个item增加一个id和这个item的值。

```
this.shownItems_.push({
    'id': index,
    'currentDegree': itemDegree,
    'item': $item,
    'value': v
});
```


未完待续
